import { expectType } from 'ts-expect';
import type { TypeEqual } from 'ts-expect';

import { COUNTRIES } from './countries';
import type {
  Country,
  CountryNum,
  REV_COUNTRIES
} from './countries';

describe('COUNTRIES and REV_COUNTRIES', () => {
  it('should use the Country interface', () => {
    expectType<TypeEqual<
      Record<Country, CountryNum>,
      typeof COUNTRIES
    >>(true);

    expectType<TypeEqual<
      Record<CountryNum, Country>,
      typeof REV_COUNTRIES
    >>(true);
  });

  it('should implement all of CountryNum', () => {
    /*
     * The Record key makes sure that all members of the key union type are defined.
     * Then at runtime we collect all keys and compare them to the values of the enum
     * to checkout that all of them are implemented
     */
    const allCountryNumsObj: Record<CountryNum, true> = {
      4: true,
      8: true,
      10: true,
      12: true,
      16: true,
      20: true,
      24: true,
      28: true,
      31: true,
      32: true,
      36: true,
      40: true,
      44: true,
      48: true,
      50: true,
      51: true,
      52: true,
      56: true,
      60: true,
      64: true,
      68: true,
      70: true,
      72: true,
      74: true,
      76: true,
      84: true,
      86: true,
      90: true,
      92: true,
      96: true,
      100: true,
      104: true,
      108: true,
      112: true,
      116: true,
      120: true,
      124: true,
      132: true,
      136: true,
      140: true,
      144: true,
      148: true,
      152: true,
      156: true,
      158: true,
      162: true,
      166: true,
      170: true,
      174: true,
      175: true,
      178: true,
      180: true,
      184: true,
      188: true,
      191: true,
      192: true,
      196: true,
      203: true,
      204: true,
      208: true,
      212: true,
      214: true,
      218: true,
      222: true,
      226: true,
      231: true,
      232: true,
      233: true,
      234: true,
      238: true,
      239: true,
      242: true,
      246: true,
      248: true,
      250: true,
      254: true,
      258: true,
      260: true,
      262: true,
      266: true,
      268: true,
      270: true,
      275: true,
      276: true,
      288: true,
      292: true,
      296: true,
      300: true,
      304: true,
      308: true,
      312: true,
      316: true,
      320: true,
      324: true,
      328: true,
      332: true,
      334: true,
      336: true,
      340: true,
      344: true,
      348: true,
      352: true,
      356: true,
      360: true,
      364: true,
      368: true,
      372: true,
      376: true,
      380: true,
      384: true,
      388: true,
      392: true,
      398: true,
      400: true,
      404: true,
      408: true,
      410: true,
      414: true,
      417: true,
      418: true,
      422: true,
      426: true,
      428: true,
      430: true,
      434: true,
      438: true,
      440: true,
      442: true,
      446: true,
      450: true,
      454: true,
      458: true,
      462: true,
      466: true,
      470: true,
      474: true,
      478: true,
      480: true,
      484: true,
      492: true,
      496: true,
      498: true,
      499: true,
      500: true,
      504: true,
      508: true,
      512: true,
      516: true,
      520: true,
      524: true,
      528: true,
      531: true,
      533: true,
      534: true,
      535: true,
      540: true,
      548: true,
      554: true,
      558: true,
      562: true,
      566: true,
      570: true,
      574: true,
      578: true,
      580: true,
      581: true,
      583: true,
      584: true,
      585: true,
      586: true,
      591: true,
      598: true,
      600: true,
      604: true,
      608: true,
      612: true,
      616: true,
      620: true,
      624: true,
      626: true,
      630: true,
      634: true,
      638: true,
      642: true,
      643: true,
      646: true,
      652: true,
      654: true,
      659: true,
      660: true,
      662: true,
      663: true,
      666: true,
      670: true,
      674: true,
      678: true,
      682: true,
      686: true,
      688: true,
      690: true,
      694: true,
      702: true,
      703: true,
      704: true,
      705: true,
      706: true,
      710: true,
      716: true,
      724: true,
      728: true,
      729: true,
      732: true,
      740: true,
      744: true,
      748: true,
      752: true,
      756: true,
      760: true,
      762: true,
      764: true,
      768: true,
      772: true,
      776: true,
      780: true,
      784: true,
      788: true,
      792: true,
      795: true,
      796: true,
      798: true,
      800: true,
      804: true,
      807: true,
      818: true,
      826: true,
      831: true,
      832: true,
      833: true,
      834: true,
      840: true,
      850: true,
      854: true,
      858: true,
      860: true,
      862: true,
      876: true,
      882: true,
      887: true,
      894: true
    };

    const allCountryNums = Object.keys(allCountryNumsObj).sort();
    const implementedCountryNums = Object.values(COUNTRIES).sort();

    expect(implementedCountryNums).toEqual(allCountryNums);
  });
});
